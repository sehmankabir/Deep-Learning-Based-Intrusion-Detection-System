# -*- coding: utf-8 -*-
"""Cyberguard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14vJqIj56Cz0prFZINTuMWs21RwziYBnm
"""

# Install SMOTE if not already installed
!pip install -q imbalanced-learn

# Imports
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.utils import to_categorical
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv("cybersecurity_attacks.csv")

# Clean up column names
df.columns = df.columns.str.strip()

# Drop rows with missing values
df.dropna(inplace=True)

# Set the correct label column
label_col = 'Attack Type'

# Encode categorical columns except the label
categorical_cols = df.select_dtypes(include='object').columns.drop(label_col)
for col in categorical_cols:
    df[col] = LabelEncoder().fit_transform(df[col])

# Encode the label column
le = LabelEncoder()
df[label_col] = le.fit_transform(df[label_col])

# Split into features and target
X = df.drop(label_col, axis=1)
y = df[label_col]

# Handle class imbalance with SMOTE
sm = SMOTE(random_state=42)
X_res, y_res = sm.fit_resample(X, y)

# Scale the features
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X_res)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_res, test_size=0.2, stratify=y_res, random_state=42)

# Convert labels to categorical (multi-class)
num_classes = len(np.unique(y))
y_train_cat = to_categorical(y_train)
y_test_cat = to_categorical(y_test)

# Build the MLP model
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    Dropout(0.3),
    Dense(32, activation='relu'),
    Dropout(0.2),
    Dense(num_classes, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train_cat, epochs=1000, batch_size=64, verbose=1)

# Predict
y_pred_prob = model.predict(X_test)
y_pred = np.argmax(y_pred_prob, axis=1)

# Evaluation
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)
report = classification_report(y_test, y_pred, target_names=le.classes_)
conf_matrix = confusion_matrix(y_test, y_pred)

# Print evaluation results
print("Accuracy:", round(accuracy * 100, 2), "%")
print("Precision:", round(precision * 100, 2), "%")
print("Recall:", round(recall * 100, 2), "%")
print("F1-Score:", round(f1 * 100, 2), "%")
print("\nClassification Report:\n", report)

# Plot confusion matrix
plt.figure(figsize=(12, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=le.classes_, yticklabels=le.classes_)
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.tight_layout()
plt.show()